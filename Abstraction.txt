abstract class Payment
{
	private  int customerId;
    String paymentId;
	double serviceTaxPercentage;
	
	Payment(int customerId)
	{
		this.customerId=customerId;
	}
	
	public int getcustomerId() {
		return customerId;
	}

	public void setcustomerId(int customerId) {
		this.customerId = customerId;
	}

	public String getpaymentId() {
		return paymentId;
	}

	public void setpaymentId(String paymentId) {
		this.paymentId = paymentId;
	}

	public double getserviceTaxPercentage() {
		return serviceTaxPercentage;
	}

	public void setserviceTaxPercentage(double serviceTaxPercentage) {
		this.serviceTaxPercentage = serviceTaxPercentage;
	}

	 abstract double payBill(double amount);
	 
	

}

public class DebitCardPayment extends Payment
{
	String paymentId;
	private static int counter;
	private double discountPercentage;

	static
	{
		counter=1000;
	}
	
	DebitCardPayment(int customerId)
	{
		super(customerId);
		setpaymentId("D"+ ++counter);
		
	}
	
	

	public int getCounter() {
		return counter;
	}



	public void setCounter(int counter) {
		this.counter = counter;
	}



	public double getDiscountPercentage() {
		return discountPercentage;
	}



	public void setDiscountPercentage(double discountPercentage) {
		this.discountPercentage = discountPercentage;
	}
	
	
	double  payBill(double amount) 
	{
		if(amount<=500)
		{
			serviceTaxPercentage=2.5;
			discountPercentage=1;
		}
		else if(amount>500 && amount<=1000)
		{
			serviceTaxPercentage=4.0;
			discountPercentage=2.0;
		}
		else if(amount>1000)
		{
			serviceTaxPercentage=5.0;
			discountPercentage=3.0;
		}
		double billAmount=amount+serviceTaxPercentage+discountPercentage;
		//System.out.println(billAmount);
		return billAmount;
	}
	

}

public class CreditCardPayment extends Payment
{
	String paymentId;
	private static int counter;
	
	
	static
	{
		counter=1000;
	}

	CreditCardPayment(int customerId) 
	{
		super(customerId);
		setpaymentId("C"+ ++counter);
	}
	
	

	public static int getCounter() {
		return counter;
	}


	public static void setCounter(int counter) {
		CreditCardPayment.counter = counter;
	}


	
	double payBill(double amount) 
	{
		if(amount<=500)
		{
			serviceTaxPercentage=3;
			
		}
		else if(amount>500 && amount<=1000)
		{
			serviceTaxPercentage=5.0;
			
		}
		else if(amount>1000)
		{
			serviceTaxPercentage=6.0;
			
		}
		double billAmount=amount+serviceTaxPercentage;
		//System.out.println(Final_Bill_Amount);
		return billAmount;
		
	}

}

public class Abstraction_Payment_Tester {

	public static void main(String[] args) 
	{
		DebitCardPayment debitCardPayment = new DebitCardPayment(101);
		 double billAmount=Math.round(debitCardPayment.payBill(500*100/100.0));
		System.out.println("Customer Id: " + debitCardPayment.getcustomerId());
		System.out.println("Payment Id: " + debitCardPayment.getpaymentId());
		System.out.println("Service tax percentage: " +
		debitCardPayment.getserviceTaxPercentage());
		System.out.println("Discount percentage: " +
		debitCardPayment.getDiscountPercentage());
		System.out.println("Total bill amount: " + billAmount);
		
		System.out.println();
		
		CreditCardPayment creditCardPayment = new CreditCardPayment(102);
		 billAmount=Math.round(creditCardPayment.payBill(1000*100/100.0));
		System.out.println("Customer Id: " + creditCardPayment.getcustomerId());
		System.out.println("Payment Id: " + creditCardPayment.getpaymentId());
		System.out.println("Service tax percentage: " +
		creditCardPayment.getserviceTaxPercentage());
		System.out.println("Total bill amount: " + billAmount);

	}

}